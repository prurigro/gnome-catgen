#!/usr/bin/env bash

#
# gnome-catgen | A Gnome 3 application-overview folder configuration tool
#
# Written by Kevin MacMartin
# Released under the MIT license
#

if [[ -n "$XDG_DATA_DIRS" ]]; then
    xdg_apps_dirs="$(grep -oE '[^:]*' <<< "$XDG_DATA_DIRS" | sed 's|$|/applications|' | tac)"
else
    xdg_apps_dirs=/usr/share/applications
fi

xdg_user_apps="$HOME/.local/share/applications"

gnome_catpath="$xdg_user_apps-categories"
script_name="${0//*\/}"

# Case insensitive regular expression determining whether a desktop file is disabled in gnome
xdg_disabled='(nodisplay|hidden|notshowin)\s*=\s*(true|gnome)'

# If $EDITOR isn't set, use vi
EDITOR=${EDITOR:=vi}

# Colour definitions if not run in a pipe
[[ -t 1 ]] && {
    c_grey=$'\e[1;30m'    # DARK GREY
    c_red=$'\e[1;31m'     # RED
    c_green=$'\e[1;32m'   # GREEN
    c_yellow=$'\e[1;33m'  # YELLOW
    c_blue=$'\e[1;34m'    # BLUE
    c_magenta=$'\e[1;35m' # MAGENTA
    c_cyan=$'\e[1;36m'    # CYAN
    c_white=$'\e[1;37m'   # WHITE
    c_clear=$'\e[0m'      # DISABLES COLOUR
}

# Declare a global array to use between functions
declare -a array=()

# Checks for configured desktop files that don't have enabled counterparts in the local or system directories
function desktop_file_check {
    for catfile in "$gnome_catpath"/*.category; do
        cat="${catfile/*\/}"
        cat="${cat/\.category}"
        printf '%s\n' "$c_blue$cat$c_clear:"

        while read -r; do
            [[ -n "$REPLY" && "$REPLY" =~ \.desktop$ && ! "$REPLY" =~ ^\ *\# ]] && {
                # All other lines should be xdg desktop files
                application="$c_white${REPLY/\.desktop}$c_grey.desktop$c_clear"
                app_not_found=1

                while read -r app_dir; do
                    [[ -f "$app_dir/$REPLY" ]] && {
                        app_not_found=0

                        grep -iqE "$xdg_disabled" "$app_dir/$REPLY" \
                            && printf '%s\n' "$application: ${c_yellow}is disabled in $c_cyan$app_dir$c_clear"
                    }
                done <<< "$xdg_apps_dirs"

                (( app_not_found )) && {
                    if [[ -f "$xdg_user_apps/$REPLY" ]]; then
                        grep -iqE "$xdg_disabled" "$xdg_user_apps/$REPLY" \
                            && printf '%s\n' "$application: ${c_yellow}is disabled in $c_cyan$xdg_user_apps$c_clear"
                    else
                        printf '%s\n' "$application ${c_red}does not exist$c_clear"
                    fi
                }
            }
        done < "$catfile"

        printf '\n'
    done

    unset category application
}

# Takes a list of items and prints them stylishly in a terminal and as a list when piped
function list_apps {
    # Exit if ${array[@]} is empty
    (( ! ${#array[*]} )) && return 1

    # Run the following if not in a pipe and the tput command exists, otherwise fallback to an unformatted list
    if [[ -t 1 ]] && type -P tput >/dev/null; then
        # Find the column width (the length of the longest item name + 1 for spacing)
        colwidth=0

        for item in "${array[@]}"; do
            (( ${#item} > colwidth )) && colwidth=$(( ${#item} - 1))
        done

        (( colwidth+=3 ))

        # Find the number of items that can be squeezed on a single line
        array_per_line=1
        while (( $(( $(( array_per_line + 1 )) * colwidth )) < $(( $(tput cols) - 2 )) )); do
            (( array_per_line++ ))
        done

        while (( $(( array_per_line * colwidth )) < $(( $(tput cols) - 2 )) )); do
            (( colwidth++ ))
        done

        (( colwidth-=3 ))

        # Print the list
        printf ' '
        count=0

        for item in "${array[@]}"; do
            leftgap=$(( $(( colwidth - ${#item} )) / 2 ))
            rightgap=$(( $(( colwidth - ${#item} )) - leftgap ))

            (( count >= array_per_line )) && {
                count=0
                printf '\n '
            }

            (( count )) && printf '%s' " $c_grey|$c_clear "
            printf "$c_white%s$c_grey%s$c_clear%${leftgap}s%${rightgap}s" "$(sed 's|\.desktop||' <<< "$item")" '.desktop' '' ''
            (( count++ ))
        done

        printf '\n'
    else
        # Display all items as an unformatted, space-separated list
        for item in "${array[@]}"; do
            printf '%s\n' "$item"
        done
    fi
}

# Gets the list of folders based on the dconf configuration
function getfolders {
    folders="$(gsettings get org.gnome.desktop.app-folders folder-children)"
    declare -a folders_array=(${folders//[\[\]\',]/})

    for (( x=0; x<${#folders_array[@]}; x++ )); do
        printf '%s' "$c_blue${folders_array[$x]}"

        if (( x < (${#folders_array[@]} - 1) )); then
            printf '%s ' "$c_white,"
        else
            printf '%s' "$c_clear"
        fi
    done

    (( ${#folders_array[@]} != 0 )) && printf '\n'
}

# Gets the list of folders based on *.category
function _getfolders {
    for catfile in "$gnome_catpath"/*.category; do
        while read -r; do
            [[ ! "$REPLY" =~ ^\ *\# ]] && {
                cat="${catfile/*\/}"
                cat="${cat/\.category}"
                printf '%s\n' "$cat"
                break
            }
        done < "$catfile"
    done
}

# Gets the list of configured apps
function getapps {
    printf '\n'

    while read -r cat; do
        [[ ! "$cat" = '@as' ]] && {
            printf '%s \n' "$c_blue$cat$c_white:$c_clear"
            array=()

            while read -r; do
                array=("${array[@]}" "$REPLY")
            done < <(gsettings get org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"$cat"/ apps | grep -v "@as \[\]" \
                | sed "s|^\[['\"]||g;s|['\"]\]$||g;s|['\"]\ *,\ *['\"]|\n|g" \
                | sed -re "s|\\\([\"\\\])|\1|g")

            list_apps
        }

        printf '\n'
    done < <(gsettings get org.gnome.desktop.app-folders folder-children \
        | sed "s/\[//g;s/\]//g;s/^['\"]//g;s/['\"]$//g;s/['\"],\ *['\"]/\n/g" \
        | sed -re "s|\\\([\"\\\])|\1|g")
}

# Tests that a directory contains files with a given extension
function test_dir {
    local status=1
    shopt -s nullglob

    for dir in "$1"/*."$2"; do
        status=0
        break
    done

    shopt -u nullglob
    return $status
}

# Gets a list of unconfigured apps
function getremaining {
    # Fail if the config directory is read only or doesn't exist
    [[ ! -w "$gnome_catpath" ]] && {
        printf '\n%s\n' "${c_red}ERROR$c_clear: Config folder '$gnome_catpath' either doesn't exist or isn't writable" >&2
        exit 1
    }

    # Declare the get application list
    declare -a get_applist=()

    # Create a list of the system applications that don't have NoDisplay=true or Hidden=true
    while read -r app_dir; do
        test_dir "$app_dir" 'desktop' && {
            while read -r; do
                get_applist=("${get_applist[@]}" "${REPLY/$app_dir\/}")
            done < <(grep -iLE "$xdg_disabled" "$app_dir"/*.desktop | sort -u)
        }
    done <<< "$xdg_apps_dirs"

    # Create a list of the local applications that don't have NoDisplay=true, Hidden=true, or NotShowIn=Gnome
    test_dir "$xdg_user_apps" 'desktop' && {
        # Add local apps that don't have NoDisplay=true, Hidden=true, or NotShowIn=Gnome
        while read -r; do
            get_applist=("${get_applist[@]}" "${REPLY/$xdg_user_apps\/}")
        done < <(grep -iLE "$xdg_disabled" "$xdg_user_apps"/*.desktop | sort -u)

        # Remove system apps with duplicates local apps that have NoDisplay=true, Hidden=true, or NotShowIn=Gnome
        while read -r; do
            application="$REPLY"
            declare -a tmp_get_applist=()

            for app in "${get_applist[@]}"; do
                [[ ! "$app" = "$application" ]] && tmp_get_applist=("${tmp_get_applist[@]}" "$app")
            done

            unset get_applist
            declare -a get_applist=("${tmp_get_applist[@]}")
        done < <(grep -ilE "$xdg_disabled" "$xdg_user_apps"/*.desktop \
            | grep -oE "[^\/]*$" | sort -u)

        unset tmp_get_applist
    }

    # Remove all applications that are defined in gnome-catgen categories
    test_dir "$gnome_catpath" 'category' && {
        while read -r; do
            application="$REPLY"
            declare -a tmp_get_applist=()

            for app in "${get_applist[@]}"; do
                [[ ! "$app" = "$application" ]] \
                    && tmp_get_applist=("${tmp_get_applist[@]}" "$app")
            done

            unset get_applist
            declare -a get_applist=("${tmp_get_applist[@]}")
        done < <(sed 's|\\|\\\\|g' "$gnome_catpath"/*.category | grep -vE '^ *#')

        unset tmp_get_applist
    }

    # Set array to get_applist
    array=("${get_applist[@]}")
}

function set {
    # Fail if the config directory doesn't exist, otherwise announce initiation
    [[ ! -d "$gnome_catpath" ]] && {
        printf '\n%s\n' "${c_red}ERROR$c_clear: config folder $c_blue$gnome_catpath$c_clear either doesn't exist or isn't readable" >&2
        exit 1
    }

    printf '\n%s\n' "${c_white}Applying current folder configuration...$c_clear"

    # String to separate the app name from the .desktop file
    separator_string='%::::::::::%'

    # Wipe out any old folder settings
    printf '\n%s\n' "${c_white}Clearing old category data before populating folders...$c_clear"
    dconf reset -f /org/gnome/desktop/app-folders/folders/

    # Create a list of categories to work from using the non-empty .category files
    _categories=$(_getfolders)

    # Start the list of dconf categories, built using the one above
    categories='['

    # Add the app data for each category and output an error if none is defined
    while read -r cat; do
        # Reset the set application list
        unset set_applist

        # Add applications from the category if they exist, are set to display and aren't commented
        printf '\n%s\n' "${c_white}Evaluating: $c_blue$cat$c_clear"

        while read -r application; do
            grep -vqE '^ *#' <<< "$application" && {
                app_not_found=1

                [[ -f "$xdg_user_apps/$application" ]] && {
                    app_not_found=0

                    grep -iqE "$xdg_disabled" "$xdg_user_apps/$application" || {
                        app_name=$(grep -ie '^name *=' "$xdg_user_apps/$application" | head -n 1 | sed 's|^name *= *||I')
                        application="$app_name $separator_string $application"
                        [[ -n "$notempty" ]] && application=$(printf '\n%s\n' "$application")
                        set_applist=$set_applist$application
                        notempty=1
                    }
                }

                while read -r app_dir; do
                    (( app_not_found )) && [[ -f "$app_dir/$application" ]] && {
                        app_not_found=0

                        grep -iqE "$xdg_disabled" "$app_dir/$application" || {
                            app_name=$(grep -ie '^name *=' "$app_dir/$application" | head -n 1 | sed 's|^name *= *||I')
                            application="$app_name $separator_string $application"
                            [[ -n "$notempty" ]] && application=$(printf '\n%s\n' "$application")
                            set_applist=$set_applist$application
                            notempty=1
                        }
                    }
                done <<< "$xdg_apps_dirs"
            }
        done < <(cat "$gnome_catpath/$cat.category")

        set_applist=$(sort -u <<< "$set_applist" | sed "s|^.* $separator_string ||")

        # Write the category and its applications if the temp file isn't empty
        [[ -n "$notempty" ]] && {
            # Add $cat to the dconf categories list if it contained any valid apps
            categories="$categories, '$(sed 's|\\|\\\\\\|g'";s|'|\\\'|g" <<< "$cat")'"

            # Write the folder category's name to dconf
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"$cat"/ name "$cat"

            # Get the application list and escape any quotes, then write to dconf
            gsettings set org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/"$cat"/ apps \
                "$(while read -r application; do
                        if grep -q "'" <<< "$application"; then
                           sed 's|"|\\"|g;s|^|"|;s|$|"|' <<< "$application"
                        else
                           sed "s|^|'|;s|$|'|" <<< "$application"
                        fi
                   done < <(sed 's|\\|\\\\\\|g' <<< "$set_applist") \
                       | sed -e ':a;N;$!ba;'"s/\n/, /g" \
                       | sed 's|^|\[|;s|$|\]|')"
        }

        # Free the empty category marker so the next category has to set it again
        unset notempty
    done <<< "$_categories"

    # Finalize the dconf categories list then write to dconf and finish
    categories="$(sed 's|\[, |\[|' <<< "$categories")]"
    grep -vq '\[\]' <<< "$categories" && gsettings set org.gnome.desktop.app-folders folder-children "$categories"
    gsettings reset org.gnome.shell app-picker-layout
    printf '\n%s\n' "${c_green}Done!$c_clear"
}

function chooseremaining {
    # Fail if the config directory is read only or doesn't exist
    [[ ! -w "$gnome_catpath" ]] && {
        printf '\n%s\n' "${c_red}ERROR$c_clear: config folder '$gnome_catpath' either doesn't exist or isn't writable" >&2
        exit 1
    }

    # Start if applications without folders exist
    local changed=0 remaining=''
    getremaining

    if (( ${#array[*]} )); then
        # Cycle through the array
        printf '\n%s\n  ' "${c_white}Folder Categories:"
        getfolders
        printf '\n%s\n  %s\n\n' "${c_white}Enter:" "${c_red}Category name $c_grey| ${c_red}Blank to skip $c_grey| ${c_red}Ctrl-c to quit$c_clear"

        for app in "${array[@]}"; do
            app_not_found=1

            while read -r app_dir; do
                [[ -d "$app_dir" && -f "$app_dir/$app" ]] \
                    && app_not_found=0
            done <<< "$xdg_apps_dirs"

            if (( ! app_not_found )) || [[ -f "$xdg_user_apps/$app" ]]; then
                eval printf '%s' "$(sed 's|^|\${c_white}|;s|\.desktop|\${c_grey}\.desktop\${c_clear}|' <<< "$app")"'${c_white}:${c_clear}\ '
                read -r catname </dev/tty

                if [[ -n "$catname" ]]; then
                    changed=1
                    printf '%s\n' "$app" >> "$gnome_catpath/$catname.category"
                else
                    printf '%s\n' "Skipping $c_white$(sed 's|\.desktop||' <<< "$app")$c_grey.desktop$c_clear..."
                fi
            fi
        done

        # Offer to run the set function if changes were made
        if (( changed )); then
            while (( 1 )); do
                printf '\n%s ' "${c_white}Update configured folder categories in Gnome? [${c_blue}Y$c_white/${c_blue}N$c_white]:$c_clear"
                read -r update_question

                case $update_question in
                    y|Y)
                        set
                        break
                        ;;
                    n|N)
                        break
                        ;;
                    *)
                        printf '\n%s\n' "${c_red}ERROR$c_clear: Invalid option" 2>&1
                        ;;
                esac
            done
        else
            printf '\n%s\n\n' "${c_white}Finished without making changes$c_clear"
        fi
    else
        printf '\n%s\n\n' "${c_white}No uncategorized applications found$c_clear"
    fi
}

function editcategory {
    if [[ -n "$1" ]]; then
        printf '%s\n' "Editing $1..."
        "$EDITOR" "$gnome_catpath/$1.category"
    else
        printf '\n%s\n' "${c_red}ERROR$c_clear: run with a category name as an argument" >&2
        help
        exit 1
    fi
}

function help {
    # Display help information
    printf '\n%s\n\n'     "$c_white$script_name$c_clear: Gnome 3 Folder Category Configuration Tool"
    printf '%s\n%63s\n\n' "${c_blue}SYNOPSIS$c_clear" "$c_yellow$script_name$c_clear [${c_magenta}COMMAND$c_clear] [${c_magenta}CAT$c_clear]"
    printf '%s\n%17s\n'   "${c_blue}COMMANDS$c_clear" "${c_red}READ$c_clear"
    printf '%45s%29s\n'   "$c_white-f$c_grey|$c_white--get-folders$c_clear" 'list active folders'
    printf '%42s%45s\n'   "$c_white-a$c_grey|$c_white--get-apps$c_clear" 'list apps in each active folders'
    printf '%47s%34s\n\n' "$c_white-r$c_grey|$c_white--get-remaining$c_clear" 'list apps without a folder'
    printf '%17s\n'       "${c_red}EDIT$c_clear"
    printf '%50s%38s\n'   "$c_white-c$c_grey|$c_white--choose-remaining$c_clear" 'assign folders to unassigned apps'
    printf '%64s%33s\n\n' "$c_white-e$c_grey|$c_white--edit-category$c_clear [${c_magenta}CAT$c_clear]" 'edit the .category file for CAT'
    printf '%18s\n'       "${c_red}WRITE$c_clear"
    printf '%37s%52s\n'   "$c_white-s$c_grey|$c_white--set$c_clear" 'apply current folder configuration'
    printf '%39s%51s\n\n' "$c_white-x$c_grey|$c_white--clear$c_clear" 'remove applied folder configuration'
    printf '%24s\n'       "${c_red}INFORMATION$c_clear"
    printf '%52s%54s\n'   "$c_white-d$c_grey|$c_white--desktop-file-check$c_clear" 'check that configured desktop exist and are enabled'
    printf '%38s%34s\n\n' "$c_white-h$c_grey|$c_white--help$c_clear" 'display this help'
}

# Install the gnome-catgen config folder if it doesn't exist
[[ -d "$gnome_catpath" ]] || install -d "$gnome_catpath"

# Fail if the config directory is read only or doesn't exist
[[ -w "$gnome_catpath" ]] || {
    printf '\n%s\n' "${c_red}ERROR$c_clear: the config folder @ $gnome_catpath doesn't exist or can't be written to" >&2
    exit 1
}

# Parse command line arguments
if [[ -n "$1" ]]; then
    for param in "$@"; do
        case "$param" in
            f|-f|--get-folders)
                getfolders
                exit 0
                ;;
            a|-a|--get-apps)
                getapps
                exit 0
                ;;
            r|-r|--get-remaining)
                getremaining
                list_apps
                exit 0
                ;;
            c|-c|--choose-remaining)
                chooseremaining
                exit 0
                ;;
            e|-e|--edit-category)
                editcategory "$2"
                exit 0
                ;;
            s|-s|--set)
                set
                exit 0
                ;;
            x|-x|--clear)
                gsettings set org.gnome.desktop.app-folders folder-children "[]"
                dconf reset -f /org/gnome/desktop/app-folders/folders/
                exit 0
                ;;
            d|-d|--desktop-file-check)
                desktop_file_check
                exit 0
                ;;
            h|-h|--help)
                help
                exit 0
                ;;
            *)
                printf '\n%s\n' "${c_red}ERROR$c_clear: $1 is not a valid option" >&2
                help
                exit 1
                ;;
        esac
    done
else
    printf '\n%s\n' "${c_red}ERROR$c_clear: run with a valid command as an argument" >&2
    help
    exit 1
fi
